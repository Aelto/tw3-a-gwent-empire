function GA_generateRandomDeck(manager: CR4GwintManager): SDeckDefinition {
  var storage: GA_Storage;
  var deck: SDeckDefinition;

  storage = GA_getStorage();
  storage.current_match = GA_GeneralDataCurrentMatch(
    GA_getDeckIdentifierFromNpc(storage.opponent)
  );

  var dictionnary: GA_CardsDictionary;
  dictionnary = new GA_VanillaCardsDictionary in manager;

  return dictionnary.generateDeck(storage.current_match);
}

/**
 * Generate a unique DeckIdentifier from the NPC, calling this function
 * twice using the same NPC should result in the same identifier. calling
 * it with two different NPCs should result in two completely different
 * identifiers.
 */
function GA_getDeckIdentifierFromNpc(npc: CNewNPC): GA_DeckIdentifier {
  var monster_category: EMonsterCategory;
  var can_be_hit_by_fists: bool;
  var can_be_targeted: bool;
  var is_teleporting: bool;
  var monster_name: name;

  var identifier: string;

  theGame.GetMonsterParamsForActor(
    npc,
    monster_category,
    monster_name,
    is_teleporting,
    can_be_targeted,
    can_be_hit_by_fists
  );

  // we add dashes between all numbers and things to make it more
  // readable. It is not a problem since the function that transforms
  // identifiers to seeds is capable of translating all sorts of characters.
  //
  // Some of the segments may seem redundant, be the more data we have
  // about a NPC the better it is.
  identifier += monster_name + "-";
  identifier += npc.GetName() + "-";
  identifier += npc.GetDisplayName() + "-";
  identifier += monster_category + "-";
  identifier += is_teleporting + "-";
  identifier += can_be_targeted + "-";
  identifier += can_be_hit_by_fists + "-";

  return GA_DeckIdentifier(identifier);
}
