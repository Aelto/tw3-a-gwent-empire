statemachine class GA_Storage {
  // The opponent for the next/ongoing match of gwent
  var opponent: CNewNPC;
  var bet_amount: int;

  var current_match: GA_GeneralDataCurrentMatch;
}

state Idle in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [Idle]");
  }
}

state Betting in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [Betting]");
    this.Betting_main();
  }

  entry function Betting_main() {
    Sleep(0.5);
    if (!GA_isPlayerBusy()) {
      this.playRandomGwentDialog();

      parent.bet_amount = 0;
      this.openHaggleWindow();
    }

    parent.GotoState('Idle');
  }

  latent function playRandomGwentDialog() {
    var dialogs: array<int>;

    dialogs.PushBack(1188483);
    dialogs.PushBack(1188473);
    dialogs.PushBack(1188476);
    dialogs.PushBack(1188481);
    dialogs.PushBack(1188481);
    dialogs.PushBack(1188488);
    dialogs.PushBack(1188490);
    dialogs.PushBack(1188493);
    dialogs.PushBack(1188495);
    dialogs.PushBack(1188498);
    dialogs.PushBack(1188504);
    dialogs.PushBack(1188506);
    dialogs.PushBack(1188509);
    dialogs.PushBack(1200258);
    dialogs.PushBack(1136548);
    dialogs.PushBack(1136707);
    dialogs.PushBack(1137396);
    dialogs.PushBack(1028746);
    dialogs.PushBack(1028773);
    dialogs.PushBack(1028793);
    dialogs.PushBack(1028748);
    dialogs.PushBack(1028750);
    dialogs.PushBack(1028765);
    dialogs.PushBack(1028750);
    dialogs.PushBack(1028793);
    dialogs.PushBack(1028761);
    dialogs.PushBack(1028750);
    dialogs.PushBack(1028778);
    dialogs.PushBack(514733);
    dialogs.PushBack(1028761);
    dialogs.PushBack(1028780);
    dialogs.PushBack(1028755);
    dialogs.PushBack(1028788);
    dialogs.PushBack(1028778);
    dialogs.PushBack(520912);
    dialogs.PushBack(522288);
    dialogs.PushBack(522516);
    dialogs.PushBack(578228);
    dialogs.PushBack(578265);
    dialogs.PushBack(578292);
    dialogs.PushBack(578330);
    dialogs.PushBack(578372);
    dialogs.PushBack(578437);
    dialogs.PushBack(578452);
    dialogs.PushBack(578467);
    dialogs.PushBack(578469);
    dialogs.PushBack(578467);
    dialogs.PushBack(578556);
    dialogs.PushBack(578576);
    dialogs.PushBack(578592);
    dialogs.PushBack(1028775);
    dialogs.PushBack(587823);

    var dialog: int = dialogs[RandRange(dialogs.Size())];

    thePlayer.PlayLine(dialog, true);
    thePlayer.WaitForEndOfSpeach();
  }

  function openHaggleWindow() {
    var haggle_module_dialog: GA_BountyModuleDialog;

    haggle_module_dialog = new GA_BountyModuleDialog in parent;
    haggle_module_dialog.openBettingWindow();
  }
}

state StartNoDialog in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [StartNoDialog]");
    this.StartNoDialog_main();
  }

  entry function StartNoDialog_main() {
    Sleep(1);
    if (!GA_isPlayerBusy()) {
      GA_openConfirmMatchStartModal();
    }
    parent.GotoState('Idle');
  }
}

state StartFromDialog in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [StartFromDialog]");
    this.StartFromDialog_main();
  }

  entry function StartFromDialog_main() {
    while (GA_isPlayerInScene()) {
      Sleep(0.2);
    }

    Sleep(0.2);
    GA_openConfirmMatchStartModal();
    parent.GotoState('Idle');
  }
}

state Playing in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [Playing]");
    this.Playing_main();
  }

  entry function Playing_main() {
    this.startMatch();
    parent.GotoState('Idle');
  }

  function startMatch() {
    var gwintManager:CR4GwintManager = theGame.GetGwintManager();
    gwintManager.testMatch = true;

    if (!GA_isPlayerBusy()) {
      thePlayer.OnGwintGameRequested('AGwentEmpireCustomDeck', GwintFaction_Neutral);
    }
  }
}

function GA_getStorage(): GA_Storage {
  return thePlayer.getAGwentEmpire();
}

/**
 * Unlike the regular getStorage function this one reset the storage when it
 * is called, great way to ensure the storage always uses a recent instance
 * of the class after an update.
 */
function GA_getCleanStorage(): GA_Storage {
  thePlayer.setAGwentEmpire(new GA_Storage in thePlayer);
  return thePlayer.getAGwentEmpire();
}

// return true in cases where the player is busy in a cutscene or in the boat.
// When a spawn should be cancelled.
function GA_isPlayerBusy(): bool {
  return thePlayer.IsInCombat()
      || thePlayer.IsUsingBoat()
      || thePlayer.IsSwimming()
      || GA_isPlayerInScene();
}

function GA_isPlayerInScene(): bool {
  return thePlayer.IsInNonGameplayCutscene()
      || thePlayer.IsInGameplayScene()
      || !thePlayer.IsActionAllowed(EIAB_DrawWeapon)
      || thePlayer.IsCiri()
      || theGame.IsDialogOrCutscenePlaying()
      || theGame.IsCurrentlyPlayingNonGameplayScene()
      || theGame.IsFading()
      || theGame.IsBlackscreen();
}