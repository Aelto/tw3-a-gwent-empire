statemachine class GA_Storage extends SU_StorageItem {
  default tag = "GA_Storage";

  // The opponent for the next/ongoing match of gwent
  var opponent: CNewNPC;

  var current_match: GA_GeneralDataCurrentMatch;
}

state Idle in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [Idle]");
  }
}

state StartNoDialog in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [StartNoDialog]");
    this.StartNoDialog_main();
  }

  entry function StartNoDialog_main() {
    Sleep(2.5);

    var gwintManager:CR4GwintManager;

    gwintManager = theGame.GetGwintManager();
    gwintManager.testMatch = true;

    if (!GA_isPlayerBusy()) {
      thePlayer.OnGwintGameRequested('AGwentEmpireCustomDeck', GwintFaction_NothernKingdom);
    }

    parent.GotoState('Idle');
  }
}

state StartFromDialog in GA_Storage {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    GALOG("GA_Storage - [StartFromDialog]");
    this.StartFromDialog_main();
  }

  entry function StartFromDialog_main() {
    while (GA_isPlayerInScene()) {
      Sleep(0.2);
    }

    Sleep(0.2);
    var gwintManager:CR4GwintManager = theGame.GetGwintManager();
    gwintManager.testMatch = true;

    thePlayer.OnGwintGameRequested('AGwentEmpireCustomDeck', GwintFaction_NothernKingdom);

    parent.GotoState('Idle');
  }
}

function GA_getStorage(): GA_Storage {
  var data: GA_Storage;

  data = SU_getStorage().getItem("GA_Storage") as GA_Storage;

  // create the data if it's the first time:
  if (!data) {
    data = new GA_Storage in thePlayer;
    SU_getStorage().setItem(data);
  }

  return data;
}

// return true in cases where the player is busy in a cutscene or in the boat.
// When a spawn should be cancelled.
function GA_isPlayerBusy(): bool {
  return thePlayer.IsInCombat()
      || thePlayer.IsUsingBoat()
      || thePlayer.IsSwimming()
      || GA_isPlayerInScene();
}

function GA_isPlayerInScene(): bool {
  return thePlayer.IsInNonGameplayCutscene()
      || thePlayer.IsInGameplayScene()
      || !thePlayer.IsActionAllowed(EIAB_DrawWeapon)
      || thePlayer.IsCiri()
      || theGame.IsDialogOrCutscenePlaying()
      || theGame.IsCurrentlyPlayingNonGameplayScene()
      || theGame.IsFading()
      || theGame.IsBlackscreen();
}