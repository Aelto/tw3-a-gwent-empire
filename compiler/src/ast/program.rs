use std::fmt::Display;

use crate::ast::*;
use crate::Spanned;

#[derive(Debug)]
pub struct Program {
  pub name: String,
  pub definitions: Vec<Spanned<Definition>>,
}

impl Display for Program {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    writeln!(f, "// generated by ruleset compiler")?;

    let generator_name = format!("GA_{}RulesetGenerator", self.name);
    let dictionary_name = format!("GA_{}CardsDictionary", self.name);
    writeln!(f, "
exec function ageruleset{}() {{
  var data: {dictionary_name};
  data = new {dictionary_name} in thePlayer;
  SU_getStorage().setItem(data);
}}

class {dictionary_name} extends GA_BaseCardsDictionary {{
  function getRulesetGenerator(): GA_BaseRulesetGenerator {{
    return new {generator_name} in this;
  }}
}}
    ", self.name)?;
    

    writeln!(
      f,
      "class {generator_name} extends GA_BaseRulesetGenerator {{"
    )?;

    for definition in &self.definitions {
      definition.fmt(f)?;
    }

    writeln!(f, "}}")?;

    Ok(())
  }
}
