// generated by ruleset compiler

exec function agerulesetVanilla() {
  var data: GA_VanillaCardsDictionary;
  data = new GA_VanillaCardsDictionary in thePlayer;
  SU_getStorage().setItem(data);
}

class GA_VanillaCardsDictionary extends GA_BaseCardsDictionary {
  function getRulesetGenerator(): GA_BaseRulesetGenerator {
    return new GA_VanillaRulesetGenerator in this;
  }
}
    
class GA_VanillaRulesetGenerator extends GA_BaseRulesetGenerator {
  function generateNorthernKingdomRulesHeroCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(7, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(10, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(8, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(9, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      return output;
  }
  function generateNorthernKingdomRulesLeaderCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(1002, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(1003, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(1004, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(1005, 1, 1, 1, GA_DeckPoints(4), GA_MatchDifficulty(5000))); // 0
      return output;
  }
  function generateNorthernKingdomRulesUnitCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(7000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 1
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 2
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 2
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(105, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(100, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(101, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(102, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(103, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(107, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(109, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(116, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(130, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(150, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(151, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(175, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(2000))); // 0
      return output;
  }
  function generateMonsterRulesHeroCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(7, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(10, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(8, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(9, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      return output;
  }
  function generateMonsterRulesLeaderCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(1002, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(1003, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(1004, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(1005, 1, 1, 1, GA_DeckPoints(4), GA_MatchDifficulty(5000))); // 0
      return output;
  }
  function generateMonsterRulesUnitCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(7000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 1
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 2
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 2
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(105, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(100, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(101, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(102, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(103, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(107, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(109, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(116, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(130, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(150, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(151, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(175, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(2000))); // 0
      return output;
  }
  function generateNilfgaardianRulesHeroCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(7, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(10, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(8, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(9, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      return output;
  }
  function generateNilfgaardianRulesLeaderCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(1002, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(1003, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(1004, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(1005, 1, 1, 1, GA_DeckPoints(4), GA_MatchDifficulty(5000))); // 0
      return output;
  }
  function generateNilfgaardianRulesUnitCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(7000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 1
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 2
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 2
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(105, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(100, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(101, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(102, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(103, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(107, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(109, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(116, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(130, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(150, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(151, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(175, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(2000))); // 0
      return output;
  }
  function generateSkelligeRulesHeroCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(7, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(10, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(8, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(9, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      return output;
  }
  function generateSkelligeRulesLeaderCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(1002, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(1003, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(1004, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(1005, 1, 1, 1, GA_DeckPoints(4), GA_MatchDifficulty(5000))); // 0
      return output;
  }
  function generateSkelligeRulesUnitCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(7000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 1
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 2
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 2
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(105, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(100, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(101, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(102, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(103, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(107, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(109, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(116, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(130, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(150, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(151, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(175, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(2000))); // 0
      return output;
  }
  function generateScoiataelRulesHeroCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(7, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(10, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(8, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(9, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      return output;
  }
  function generateScoiataelRulesLeaderCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(1002, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(1003, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(1004, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(1005, 1, 1, 1, GA_DeckPoints(4), GA_MatchDifficulty(5000))); // 0
      return output;
  }
  function generateScoiataelRulesUnitCards(): array<GA_CardEntry> {
      var output: array<GA_CardEntry>;
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(125, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(126, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(127, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(140, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(7000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(1000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 0
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 1
      output.PushBack(GA_CardEntry(121, 1, 1, 1, GA_DeckPoints(3), GA_MatchDifficulty(5000))); // 2
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(146, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 1
      output.PushBack(GA_CardEntry(160, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 2
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(105, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(2000))); // 0
      output.PushBack(GA_CardEntry(100, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(101, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(102, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(103, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(107, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(109, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(116, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(130, 1, 1, 1, GA_DeckPoints(5), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(150, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(151, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(0))); // 0
      output.PushBack(GA_CardEntry(170, 1, 1, 1, GA_DeckPoints(2), GA_MatchDifficulty(3000))); // 0
      output.PushBack(GA_CardEntry(175, 1, 1, 1, GA_DeckPoints(1), GA_MatchDifficulty(2000))); // 0
      return output;
  }
}
